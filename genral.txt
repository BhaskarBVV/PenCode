1.SUM OF LEFT LEAF NODES
2.SEARCH IN SORTED 2D MARTIX
3.BINARY TREE LEVEL ORDER TRAVERSAL
4.Construct binary tree from preorder and inorder TRAVERSAL
5.Construct a binary search Tree from preorder traversal
6.Find all the paths in bianry tree
7.All the paths of binary tree having the sum of their nodes equal to Target sum;  
8.To check if any one path of binary tree have sum equal to target sum;
9.Find the total sum of all numbers represented by root-to-leaf nodes.
Tree root->     4
            9       0   
        5       1  
        numbers->495+491+40
10.lexicographically smallest string among all the strings formed by moving on all 
    paths from all leaves to root.
11.Add one row (level) to a tree.   
Tree root->    4                      4
            2     6     -->     1             1      <-- New row added.
          3   1  5            2                  6  
                            3   1              5

12. Number of paths (may or may not containn head and leadf node) having sum equal 
    to target sum.
13. Find the sum of the nodes of BST having values in range [low, high] inclusive.
14. To check if two binary trees are same or not.
15. Deleting node in Binary search Tree.
16. Print the level of the binary tree with maximum sum
    (https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/)
17. Sum of Root To Leaf Binary Numbers 
    (https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/)
18. Arrange all nodes of tree in right skewed increasing order
    (https://leetcode.com/problems/increasing-order-search-tree/)
19. Maximum Bianry tree, divide array, find max and make node, find max value in the 
    left and right of the previously founded maximum value
    (https://leetcode.com/problems/maximum-binary-tree/)
20. Deepest leaf nodes sum (https://leetcode.com/problems/deepest-leaves-sum/   )
21. swap nodes in pair (https://leetcode.com/problems/swap-nodes-in-pairs/)
22. Find squre root of number without sqrt() 
23. Check if binary tree is balanced or not(https://leetcode.com/problems/balanced-binary-tree/)
24. Replace every node except child node by sum of all of its child nodes.
          8                            63
    10          3              23             27
  1    6      14   -->>     1     16        13
      9  7   13                 9    7    13

          

https://leetcode.com/problems/find-bottom-left-tree-value/   
https://leetcode.com/problems/find-mode-in-binary-search-tree/          














ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª
ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰1.SUM OF LEFT LEAF NODESğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
// struct TreeNode
// {
//     int val;
//     TreeNode *left;
//     TreeNode *right;
//     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
// };
// int x = 0;
// int leftt(TreeNode *root)
// {
//     if (root == 0)
//         return 0;
//     else if (root->left != 0 || root->right != 0)
//         return 0;
//     else
//         return root->val;
// }
// int sumOfLeftLeaves(TreeNode *root)
// {
//     if (root == 0)
//         return 0;

//     x += leftt(root->left);
//     sumOfLeftLeaves(root->left);
//     sumOfLeftLeaves(root->right);
//     return x;
// }
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª









ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰2.SEARCH IN SORTED 2D MARTIXğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
bool searchMatrix(vector<vector<int>> &matrix, int target)
{
    //search in 2d matrix;
    int row = matrix.size();
    int col = matrix[0].size();
    int i = 0, j = col - 1;
    while (i < row && j >= 0)
    {
        if (matrix[i][j] == target)
            return true;
        else if (matrix[i][j] < target)
            i++;
        else if (matrix[i][j] > target)
            j--;
    }
    return false;
}
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª










ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰//3.BINARY TREE LEVEL ORDER TRAVERSAL ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ 
class Solution {
public:
    int h;
    int height(TreeNode* root)
    {
        if(root==0)
            return 0;;
        int ls=height(root->left);
        int rs=height(root->right);
        return max(ls,rs)+1;
    }
    
    void add(TreeNode * root,int l,vector<vector<int>>&v)
    {
        if(root==0)
            return;
        v[l].push_back(root->val);
        add(root->left,l+1,v);
        add(root->right,l+1,v);
    }
    
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        this->h=height(root);
        vector<vector<int>>v(h);
        add(root,0,v);
        return v;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª









ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰//4.Construct binary tree from preorder and inorder TRAVERSALğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
TreeNode *Build_Tree_Helper(vector<int> pre, vector<int> ino, int preS, int preE, int inS, int inE)
{
    if (preS > preE || inS > inE)
        return 0;
    //Root node will always be at the beginning of preorder traversal;
    int root_Data = pre[preS];
    //searh the root node in inorder traversal;
    int root_Inorder_Index = -1;
    for (int i = inS; i <= inE; i++)
    {
        if (ino[i] == root_Data)
        {
            root_Inorder_Index = i;
            break;
        }
    }
    int Left_Inorder_start = inS;
    int Left_Inorder_end = root_Inorder_Index - 1;
    int Right_Inorder_start = root_Inorder_Index + 1;
    int Right_Inorder_end = inE;

    int Left_Preorder_start = preS + 1;
    int Left_Preorder_end = Left_Preorder_start + Left_Inorder_end - Left_Inorder_start;
    int Right_Preorder_start = Left_Preorder_end + 1;
    int Right_Preorder_end = preE;

    TreeNode *root = new TreeNode(root_Data);
    root->left = Build_Tree_Helper(pre, ino, Left_Preorder_start, Left_Preorder_end, Left_Inorder_start, Left_Inorder_end);
    root->right = Build_Tree_Helper(pre, ino, Right_Preorder_start, Right_Preorder_end, Right_Inorder_start, Right_Inorder_end);
    return root;
}

TreeNode *buildTree(vector<int> &pre, vector<int> &ino)
{
    TreeNode *root = Build_Tree_Helper(pre, ino, 0, pre.size() - 1, 0, ino.size() - 1);
    return root;
}
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª






ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰//5.Construct a binary search Tree from preorder traversalğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
struct TreeNode {
int val;
TreeNode *left;
TreeNode *right;
TreeNode() : val(0), left(nullptr), right(nullptr) {}
TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
class Solution {
public:
    TreeNode * insert(TreeNode * root, int val)
    {
        if(root==NULL)
        {root=new TreeNode(val); return root;}
        if(root->val<val)
            root->right=insert(root->right,val);
        else
            root->left=insert(root->left,val);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& pre) 
    {
        TreeNode* root=NULL;
        for(auto it: pre)
        {
            root=insert(root,it);
        }
        return root;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª










ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰6.Find all the paths in bianry treeğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string>s;
    void node_helper(TreeNode*root,string a)
    {
        if(root==NULL)
            return;
        
        a+=to_string(root->val);
        a+="->";
        if(root->left==0 && root->right==0)
        {
            a.erase(a.size()-1);
            a.erase(a.size()-1);
            s.push_back(a);
        }
        node_helper(root->left,a);
        node_helper(root->right,a);
    }
    vector<string> binaryTreePaths(TreeNode* root) 
    {
        if(root==NULL)
            return s;
        string a;
        node_helper(root,a);
        return s;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª








ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ 7.All the paths of binary tree: 
having the sum of their nodes equal to Target sum; ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>>v;
    void TreeHelper(TreeNode* root,vector<int>a, int sum, int target)
    {
        if(root==NULL)
            return;
        a.push_back(root->val);
        sum+=root->val;
        if(root->right==NULL && root->left==NULL && sum==target)
        {
            v.push_back(a);
        }
        TreeHelper(root->right,a,sum,target);
        TreeHelper(root->left,a,sum,target);
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) 
    {
        vector<int>a;
        int sum=0;
        TreeHelper(root,a,sum,targetSum);
        return v;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª









ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ 8.To check if any path of binary tree have sum equal to target sum ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool treeHelper(TreeNode * root, int sum, int target)
    {
        if(root==NULL)
            return false;
        sum+=root->val;
        if(sum==target && root->right==0 && root->left==0)
            return true;
        bool a=treeHelper(root->left,sum,target);
        bool b=treeHelper(root->right,sum, target);
        return (a || b);
    }
    bool hasPathSum(TreeNode* root, int targetSum) 
    {
        bool chk=treeHelper(root,0,targetSum);
        return chk;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª










ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰9.Find the total sum of all numbers represented by root-to-leaf nodes.ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void treeHelper(TreeNode*root, int &sum, int num)
    {
        if(root==NULL)
            return;
        num=num*10+root->val;
        if(root->left==0 && root->right==0)
            sum+=num;
        treeHelper(root->left,sum,num);
        treeHelper(root->right,sum,num);
        
    }
    int sumNumbers(TreeNode* root) 
    {
        int sum=0,num=0;
        treeHelper(root, sum,num);
        return sum;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª










ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰10.lexicographically smallest string among all the strings
 formed by moving on all paths from all leaves to root.ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
 ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    static bool tst(string a, string b)
    {
        return a<b;
    }
    string reverse(string s)
    {
        string a="";
        for(int i=s.size()-1;i>=0;i--)
            a+=s[i];
        return a;
    }
    void treeHelper(TreeNode*root, string s, vector<string>&v)
    {
        if(root==NULL)
            return;
        char a='a';
        a=a+root->val;
        s+=a;
        
        if(root->left==0 && root->right==0)
            v.push_back(reverse(s));
        treeHelper(root->left,s, v);
        treeHelper(root->right,s, v);
    }
    string smallestFromLeaf(TreeNode* root) 
    {
        vector<string>v;
        string s="";
        treeHelper(root,s,v);
        sort(v.begin(),v.end(),tst);
        return v[0];
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª












ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰11. Add one row (level) to a tree.ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
 ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°ğŸ”°
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* treeHelper(TreeNode* root, int k, int v, int d, TreeNode*prev)
    {
        if(root==NULL && k!=d)
            return NULL;
        if(root==NULL && k==d)
        {
            TreeNode * node = new TreeNode(v,0,0);
            return node;
        }
        if(k==d)
        {
            cout<<"a";
            if(prev==NULL)
            {TreeNode*node=new TreeNode(v,root,0);
            return node;}
            else if(prev->left==root)
            {TreeNode*node=new TreeNode(v,root,0);
            return node;}
            else if(prev->right==root)
            {TreeNode*node=new TreeNode(v,0,root);
            return node;}
        }
        prev=root;
        root->left=treeHelper(root->left,k+1,v,d,prev);
        root->right=treeHelper(root->right,k+1,v,d,prev);
        return root;   
    }
    TreeNode* addOneRow(TreeNode* root, int val, int depth) 
    {
        TreeNode * prev=NULL;
        root=treeHelper(root,1,val,depth,prev);
        return root;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª












ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰12. Number of paths (may or may not containn head and leadf node) having sum equal to target sum.ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void getNodes(TreeNode* root, vector<TreeNode*>&v)
    {
        if(root==NULL)
            return;
        v.push_back(root);  
        getNodes(root->left,v);
        getNodes(root->right,v);
    }
    void sumOfNodes(TreeNode*root,int targetSum,int sum, int &totSum)
    {
        if(root==NULL)
            return;
        sum+=root->val;
        if(sum==targetSum)
           totSum+=1;
        sumOfNodes(root->left,targetSum,sum,totSum);
        sumOfNodes(root->right,targetSum,sum,totSum);
    }
    int pathSum(TreeNode* root, int targetSum) 
    {
        vector<TreeNode*>v;
        getNodes(root,v);
        //totSum -> tot_paths_with_TargetSum;
        int totSum=0;
        for(auto it: v)
        {
            sumOfNodes(it,targetSum,0,totSum);
        }
        return totSum;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª












ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰13. Find the sum of the nodes of BST having values in range [low, high] inclusive.ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
class Solution {
public:
    void TreeHelper(TreeNode*root, int &sum, int l, int h)
    {
        if(root==NULL)
            return;
        if(root->val>=l && root->val<=h)
            sum+=root->val;
        TreeHelper(root->left,sum,l,h);
        TreeHelper(root->right,sum,l,h);
    }
    int rangeSumBST(TreeNode* root, int low, int high) 
    {
        int sum=0;
        TreeHelper(root,sum,low,high);
        return sum;
    }
};

OR

class Solution
{
public:
    int rangeSumBST(TreeNode *root, int low, int high)
    {
        if (root)
            return rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high) + ((root->val >= low && root->val <= high) ? root->val : 0);
        return 0;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª










ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰14. To check if two binary trees are same or not. ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) 
    {
        if(p==NULL && q==NULL)
            return true;
        if((p==NULL && q!=NULL)||(p!=NULL && q==NULL))
            return false;
        return isSameTree(p->right,q->right) && isSameTree(p->left,q->left)&&((p->val==q->val)?true:false);
    }
};

OR

100% faster
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL){
            return true;
        }
        if(p==NULL && q!=NULL || p!=NULL && q==NULL || p->val !=q->val){
            return false;
        }
        
        return isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª












ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰15. Deleting node in Binary search Tree.ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//we will move continuously to right for max value, from the left the of node having value equal to key value,    
    int max_val(TreeNode*root)
    {
        if(root->right==NULL)
            return root->val;
        return max_val(root->right);
    }
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if(root==NULL)
            return NULL;
        if(root->val<key)
            root->right=deleteNode(root->right,key);
        else if(root->val>key)
            root->left=deleteNode(root->left,key);
        else 
        {
            //node with key value have no childs.
            if(root->left==nullptr && root->right==nullptr)
                return NULL;
            
            else if(root->right!=nullptr && root->left!=nullptr)
            {
                //node with key value having both left and right child.
                //node having both childs will be replaced by the the max value of its left sub tree,
                //bcz, in the left subtree max value will have no right child.
                //and it will be easy to remove the nodes with zero or 1 child.
                int mx=max_val(root->left);
                root->val=mx;
                cout<<mx;
                root->left=deleteNode(root->left,mx);
                return root;
            }
            else
            {
                //node with key value having either left or right child only.
                if(root->right!=nullptr)
                    return root->right;
                else if(root->left!=nullptr)
                    return root->left;
            }
        }
        return root;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª













ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰16. Print the level of the binary tree with maximum sum.ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void findSum(TreeNode*root, int l, map<int,int>&mp)
    {
        if(root==NULL)
            return ;
        mp[l]+=root->val;
        findSum(root->left,l+1,mp);
        findSum(root->right,l+1,mp);
    }
    int maxLevelSum(TreeNode* root) 
    {
        map<int,int>mp;
        int level=1;
        findSum(root,level,mp);
        int mx=-INT_MAX, mxl=1;
        for(auto it: mp)
        {
            if(it.second>mx)
            {
                mx=it.second;
                mxl=it.first;
            }
        }
        return mxl;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª











ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰17.Sum of Root To Leaf Binary NumbersğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int TreeHelper(TreeNode*root,int sum)
    {
        if(root==NULL)
            return 0;
        sum=2*sum+root->val;
        if(root->left==NULL && root->right==NULL)
            return sum;
        return TreeHelper(root->left,sum)+TreeHelper(root->right,sum);
    }
    int sumRootToLeaf(TreeNode* root) 
    {
        return TreeHelper(root,0);
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª












ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰18. Arrange all nodes of tree in right skewed increasing orderğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root,vector<int>&v)
    {
        if(root==NULL)
            return;
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }
    TreeNode* increasingBST(TreeNode* root) 
    {
        if(root==NULL)
            return 0;
        TreeNode*roota=new TreeNode(-1);
        TreeNode*dummy=roota;
        vector<int>v;
        inorder(root,v);
        for(auto it: v)
        {
            TreeNode * temp= new TreeNode(it);
            roota->left=NULL;
            roota->right=temp;
            roota=temp;
        }
        return dummy->right;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª








ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰19. Maximum Bianry tree, divide array, find max and make node, find max value in the 
    left and right of the previously founded maximum valueğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
    ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* treeHelper(vector<int>v,int s, int e)
    {
        if(s>e)
            return 0;
        int mx=-1,in;
        for(int i=s;i<=e;i++)
        {
            if(v[i]>mx)
            {
                mx=v[i];
                in=i;
            }
        }
        TreeNode*r=new TreeNode(mx);
        r->left=treeHelper(v,s,in-1);
        r->right=treeHelper(v,in+1,e);
        return r;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) 
    {
        return treeHelper(nums,0,nums.size()-1);
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª  











ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰20. Deepest leaf nodes sumğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
class Solution {
public:
    int height(TreeNode*root)
    {
        if(root==NULL)
            return 0;
        int ls=height(root->left);
        int rs=height(root->right);
        return max(ls,rs)+1;
    }
    int sum(TreeNode*root, int h, int k)
    {
        if(root==NULL)
            return 0;
        if(h==k)
            return root->val;
        return sum(root->left,h,k+1)+sum(root->right,h,k+1);
        
    }
    int deepestLeavesSum(TreeNode* root)          
    {
        int h=height(root);
        return sum(root,h,1);
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª








ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰21. swap nodes in pairğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) 
    {
        if(head==NULL || head->next==NULL)
            return head;
        ListNode * temp=head;
        while(true)
        {
            if(temp==0 || temp->next==0)
                return head;
            swap(temp->val,temp->next->val);
            temp=temp->next->next;
        }
            return head;
    }
};
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª







ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰22. Find squre root of number without sqrt() ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
int mySqrt(int x) 
    {
        long long int i=1;
        while(i*i<=x)
        {
            i+=1;
        }
        if(i*i>x)
            i-=1;
        return i;
            
    }
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª







ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰23. Check if binary tree is balanced or not ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
#include <bits/stdc++.h>
using namespace std;
struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
class pairr
{
public:
    int height;
    bool balanced;
};
TreeNode *BuildTree()
{
    int d;
    cin >> d;
    if (d == -1)
        return NULL;
    TreeNode *Node = new TreeNode(d);
    Node->left = BuildTree();
    Node->right = BuildTree();
    return Node;
}
void print(TreeNode *root)
{
    if (root == NULL)
        return;
    cout << root->val;
    print(root->left);

    print(root->right);
}
pairr isBalanced(TreeNode *root)
{
    pairr p;
    if (root == NULL)
    {
        p.height = 0;
        p.balanced = true;
        return p;
    }
    pairr left = isBalanced(root->left);
    pairr right = isBalanced(root->right);
    p.height = max(left.height, right.height) + 1;
    if (abs(left.height - right.height) <= 1 && right.balanced && left.balanced)
        p.balanced = true;
    else
        p.balanced = false;
    return p;
}
int main()
{
    TreeNode *root = BuildTree();
    cout << "PreOrder of Tree is: ";
    print(root);
    cout << endl;
    cout << "Is tree balanced: " << isBalanced(root).balanced;
}

ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª





  






ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰ğŸ‘‰24. Replace every node except child node by sum of all of its child nodes.ğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆğŸ‘ˆ
#include <iostream>
using namespace std;
struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};
TreeNode *BuildTree()
{
    int d;
    cin >> d;
    if (d == -1)
        return NULL;
    TreeNode *Node = new TreeNode(d);
    cout << "enter left child of " << d << " : ";
    Node->left = BuildTree();
    cout << "enter right child of " << d << " : ";
    Node->right = BuildTree();
    return Node;
}
void print(TreeNode *root)
{
    if (root == NULL)
        return;
    cout << root->val << " ";
    print(root->left);
    print(root->right);
}
int RootToChildSum(TreeNode *root)
{
    if (root == NULL)
        return 0;
    int l = RootToChildSum(root->left);
    int r = RootToChildSum(root->right);
    int y = root->val;
    int x = l + r;
    if (x != 0)
        root->val = x;
    return x + y;
}
int main()
{
    TreeNode *root = BuildTree();
    cout << "PreOrder of Tree is: ";
    print(root);
    cout << endl;
    int x = RootToChildSum(root);
    cout << "PreOrder of Tree is: ";
    print(root);
}
ğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ªğŸ’ª
